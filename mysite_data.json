[
{
  "model": "admin.logentry",
  "pk": 1,
  "fields": {
    "action_time": "2024-07-15T07:56:52.874Z",
    "user": 1,
    "content_type": 7,
    "object_id": "1",
    "object_repr": "Что такое HTTP?",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 2,
  "fields": {
    "action_time": "2024-07-15T07:56:56.730Z",
    "user": 1,
    "content_type": 7,
    "object_id": "1",
    "object_repr": "Что такое HTTP?",
    "action_flag": 2,
    "change_message": "[]"
  }
},
{
  "model": "admin.logentry",
  "pk": 3,
  "fields": {
    "action_time": "2024-07-15T08:45:15.846Z",
    "user": 1,
    "content_type": 7,
    "object_id": "2",
    "object_repr": "SOLID",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 4,
  "fields": {
    "action_time": "2024-07-15T18:11:24.926Z",
    "user": 1,
    "content_type": 7,
    "object_id": "3",
    "object_repr": "Что такое HTML",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 5,
  "fields": {
    "action_time": "2024-07-16T08:11:26.267Z",
    "user": 1,
    "content_type": 7,
    "object_id": "4",
    "object_repr": "TCP и UDP – в чем разница?",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 6,
  "fields": {
    "action_time": "2024-07-16T08:12:14.408Z",
    "user": 1,
    "content_type": 7,
    "object_id": "5",
    "object_repr": "Требования ACID на простом языке",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 7,
  "fields": {
    "action_time": "2024-07-16T11:19:27.858Z",
    "user": 1,
    "content_type": 9,
    "object_id": "1",
    "object_repr": "programming",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}, {\"added\": {\"name\": \"tagged item\", \"object\": \"\\u0427\\u0442\\u043e \\u0442\\u0430\\u043a\\u043e\\u0435 HTTP? tagged with programming\"}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 8,
  "fields": {
    "action_time": "2024-07-16T11:19:37.057Z",
    "user": 1,
    "content_type": 9,
    "object_id": "2",
    "object_repr": "web",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}, {\"added\": {\"name\": \"tagged item\", \"object\": \"\\u0427\\u0442\\u043e \\u0442\\u0430\\u043a\\u043e\\u0435 HTTP? tagged with web\"}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 9,
  "fields": {
    "action_time": "2024-07-16T11:19:48.370Z",
    "user": 1,
    "content_type": 9,
    "object_id": "3",
    "object_repr": "solid",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}, {\"added\": {\"name\": \"tagged item\", \"object\": \"\\u0427\\u0442\\u043e \\u0442\\u0430\\u043a\\u043e\\u0435 HTTP? tagged with solid\"}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 10,
  "fields": {
    "action_time": "2024-07-16T11:20:08.334Z",
    "user": 1,
    "content_type": 9,
    "object_id": "2",
    "object_repr": "web",
    "action_flag": 2,
    "change_message": "[]"
  }
},
{
  "model": "admin.logentry",
  "pk": 11,
  "fields": {
    "action_time": "2024-07-16T11:20:31.308Z",
    "user": 1,
    "content_type": 7,
    "object_id": "1",
    "object_repr": "Что такое HTTP?",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"Tags\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 12,
  "fields": {
    "action_time": "2024-07-16T11:20:51.170Z",
    "user": 1,
    "content_type": 9,
    "object_id": "3",
    "object_repr": "solid",
    "action_flag": 2,
    "change_message": "[{\"added\": {\"name\": \"tagged item\", \"object\": \"\\u0427\\u0442\\u043e \\u0442\\u0430\\u043a\\u043e\\u0435 HTML tagged with solid\"}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 13,
  "fields": {
    "action_time": "2024-07-16T11:21:02.167Z",
    "user": 1,
    "content_type": 7,
    "object_id": "2",
    "object_repr": "SOLID",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"Tags\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 14,
  "fields": {
    "action_time": "2024-07-16T15:22:20.304Z",
    "user": 1,
    "content_type": 7,
    "object_id": "6",
    "object_repr": "Markdown-test",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "auth.permission",
  "pk": 1,
  "fields": {
    "name": "Can add log entry",
    "content_type": 1,
    "codename": "add_logentry"
  }
},
{
  "model": "auth.permission",
  "pk": 2,
  "fields": {
    "name": "Can change log entry",
    "content_type": 1,
    "codename": "change_logentry"
  }
},
{
  "model": "auth.permission",
  "pk": 3,
  "fields": {
    "name": "Can delete log entry",
    "content_type": 1,
    "codename": "delete_logentry"
  }
},
{
  "model": "auth.permission",
  "pk": 4,
  "fields": {
    "name": "Can view log entry",
    "content_type": 1,
    "codename": "view_logentry"
  }
},
{
  "model": "auth.permission",
  "pk": 5,
  "fields": {
    "name": "Can add permission",
    "content_type": 2,
    "codename": "add_permission"
  }
},
{
  "model": "auth.permission",
  "pk": 6,
  "fields": {
    "name": "Can change permission",
    "content_type": 2,
    "codename": "change_permission"
  }
},
{
  "model": "auth.permission",
  "pk": 7,
  "fields": {
    "name": "Can delete permission",
    "content_type": 2,
    "codename": "delete_permission"
  }
},
{
  "model": "auth.permission",
  "pk": 8,
  "fields": {
    "name": "Can view permission",
    "content_type": 2,
    "codename": "view_permission"
  }
},
{
  "model": "auth.permission",
  "pk": 9,
  "fields": {
    "name": "Can add group",
    "content_type": 3,
    "codename": "add_group"
  }
},
{
  "model": "auth.permission",
  "pk": 10,
  "fields": {
    "name": "Can change group",
    "content_type": 3,
    "codename": "change_group"
  }
},
{
  "model": "auth.permission",
  "pk": 11,
  "fields": {
    "name": "Can delete group",
    "content_type": 3,
    "codename": "delete_group"
  }
},
{
  "model": "auth.permission",
  "pk": 12,
  "fields": {
    "name": "Can view group",
    "content_type": 3,
    "codename": "view_group"
  }
},
{
  "model": "auth.permission",
  "pk": 13,
  "fields": {
    "name": "Can add user",
    "content_type": 4,
    "codename": "add_user"
  }
},
{
  "model": "auth.permission",
  "pk": 14,
  "fields": {
    "name": "Can change user",
    "content_type": 4,
    "codename": "change_user"
  }
},
{
  "model": "auth.permission",
  "pk": 15,
  "fields": {
    "name": "Can delete user",
    "content_type": 4,
    "codename": "delete_user"
  }
},
{
  "model": "auth.permission",
  "pk": 16,
  "fields": {
    "name": "Can view user",
    "content_type": 4,
    "codename": "view_user"
  }
},
{
  "model": "auth.permission",
  "pk": 17,
  "fields": {
    "name": "Can add content type",
    "content_type": 5,
    "codename": "add_contenttype"
  }
},
{
  "model": "auth.permission",
  "pk": 18,
  "fields": {
    "name": "Can change content type",
    "content_type": 5,
    "codename": "change_contenttype"
  }
},
{
  "model": "auth.permission",
  "pk": 19,
  "fields": {
    "name": "Can delete content type",
    "content_type": 5,
    "codename": "delete_contenttype"
  }
},
{
  "model": "auth.permission",
  "pk": 20,
  "fields": {
    "name": "Can view content type",
    "content_type": 5,
    "codename": "view_contenttype"
  }
},
{
  "model": "auth.permission",
  "pk": 21,
  "fields": {
    "name": "Can add session",
    "content_type": 6,
    "codename": "add_session"
  }
},
{
  "model": "auth.permission",
  "pk": 22,
  "fields": {
    "name": "Can change session",
    "content_type": 6,
    "codename": "change_session"
  }
},
{
  "model": "auth.permission",
  "pk": 23,
  "fields": {
    "name": "Can delete session",
    "content_type": 6,
    "codename": "delete_session"
  }
},
{
  "model": "auth.permission",
  "pk": 24,
  "fields": {
    "name": "Can view session",
    "content_type": 6,
    "codename": "view_session"
  }
},
{
  "model": "auth.permission",
  "pk": 25,
  "fields": {
    "name": "Can add post",
    "content_type": 7,
    "codename": "add_post"
  }
},
{
  "model": "auth.permission",
  "pk": 26,
  "fields": {
    "name": "Can change post",
    "content_type": 7,
    "codename": "change_post"
  }
},
{
  "model": "auth.permission",
  "pk": 27,
  "fields": {
    "name": "Can delete post",
    "content_type": 7,
    "codename": "delete_post"
  }
},
{
  "model": "auth.permission",
  "pk": 28,
  "fields": {
    "name": "Can view post",
    "content_type": 7,
    "codename": "view_post"
  }
},
{
  "model": "auth.permission",
  "pk": 29,
  "fields": {
    "name": "Can add comment",
    "content_type": 8,
    "codename": "add_comment"
  }
},
{
  "model": "auth.permission",
  "pk": 30,
  "fields": {
    "name": "Can change comment",
    "content_type": 8,
    "codename": "change_comment"
  }
},
{
  "model": "auth.permission",
  "pk": 31,
  "fields": {
    "name": "Can delete comment",
    "content_type": 8,
    "codename": "delete_comment"
  }
},
{
  "model": "auth.permission",
  "pk": 32,
  "fields": {
    "name": "Can view comment",
    "content_type": 8,
    "codename": "view_comment"
  }
},
{
  "model": "auth.permission",
  "pk": 33,
  "fields": {
    "name": "Can add tag",
    "content_type": 9,
    "codename": "add_tag"
  }
},
{
  "model": "auth.permission",
  "pk": 34,
  "fields": {
    "name": "Can change tag",
    "content_type": 9,
    "codename": "change_tag"
  }
},
{
  "model": "auth.permission",
  "pk": 35,
  "fields": {
    "name": "Can delete tag",
    "content_type": 9,
    "codename": "delete_tag"
  }
},
{
  "model": "auth.permission",
  "pk": 36,
  "fields": {
    "name": "Can view tag",
    "content_type": 9,
    "codename": "view_tag"
  }
},
{
  "model": "auth.permission",
  "pk": 37,
  "fields": {
    "name": "Can add tagged item",
    "content_type": 10,
    "codename": "add_taggeditem"
  }
},
{
  "model": "auth.permission",
  "pk": 38,
  "fields": {
    "name": "Can change tagged item",
    "content_type": 10,
    "codename": "change_taggeditem"
  }
},
{
  "model": "auth.permission",
  "pk": 39,
  "fields": {
    "name": "Can delete tagged item",
    "content_type": 10,
    "codename": "delete_taggeditem"
  }
},
{
  "model": "auth.permission",
  "pk": 40,
  "fields": {
    "name": "Can view tagged item",
    "content_type": 10,
    "codename": "view_taggeditem"
  }
},
{
  "model": "auth.permission",
  "pk": 41,
  "fields": {
    "name": "Can add site",
    "content_type": 11,
    "codename": "add_site"
  }
},
{
  "model": "auth.permission",
  "pk": 42,
  "fields": {
    "name": "Can change site",
    "content_type": 11,
    "codename": "change_site"
  }
},
{
  "model": "auth.permission",
  "pk": 43,
  "fields": {
    "name": "Can delete site",
    "content_type": 11,
    "codename": "delete_site"
  }
},
{
  "model": "auth.permission",
  "pk": 44,
  "fields": {
    "name": "Can view site",
    "content_type": 11,
    "codename": "view_site"
  }
},
{
  "model": "auth.user",
  "pk": 1,
  "fields": {
    "password": "pbkdf2_sha256$720000$A7DRHqnJpuBRoFucWejO9R$6bZwWiTuSM4D8uFg5rLDAsOibizoj+spEt47bVxGVL8=",
    "last_login": "2024-07-15T07:55:36.070Z",
    "is_superuser": true,
    "username": "admin",
    "first_name": "",
    "last_name": "",
    "email": "admin@admin.com",
    "is_staff": true,
    "is_active": true,
    "date_joined": "2024-07-15T07:51:34.866Z",
    "groups": [],
    "user_permissions": []
  }
},
{
  "model": "contenttypes.contenttype",
  "pk": 1,
  "fields": {
    "app_label": "admin",
    "model": "logentry"
  }
},
{
  "model": "contenttypes.contenttype",
  "pk": 2,
  "fields": {
    "app_label": "auth",
    "model": "permission"
  }
},
{
  "model": "contenttypes.contenttype",
  "pk": 3,
  "fields": {
    "app_label": "auth",
    "model": "group"
  }
},
{
  "model": "contenttypes.contenttype",
  "pk": 4,
  "fields": {
    "app_label": "auth",
    "model": "user"
  }
},
{
  "model": "contenttypes.contenttype",
  "pk": 5,
  "fields": {
    "app_label": "contenttypes",
    "model": "contenttype"
  }
},
{
  "model": "contenttypes.contenttype",
  "pk": 6,
  "fields": {
    "app_label": "sessions",
    "model": "session"
  }
},
{
  "model": "contenttypes.contenttype",
  "pk": 7,
  "fields": {
    "app_label": "blog",
    "model": "post"
  }
},
{
  "model": "contenttypes.contenttype",
  "pk": 8,
  "fields": {
    "app_label": "blog",
    "model": "comment"
  }
},
{
  "model": "contenttypes.contenttype",
  "pk": 9,
  "fields": {
    "app_label": "taggit",
    "model": "tag"
  }
},
{
  "model": "contenttypes.contenttype",
  "pk": 10,
  "fields": {
    "app_label": "taggit",
    "model": "taggeditem"
  }
},
{
  "model": "contenttypes.contenttype",
  "pk": 11,
  "fields": {
    "app_label": "sites",
    "model": "site"
  }
},
{
  "model": "sessions.session",
  "pk": "ujcaz9kalw9wb405ali5wscogqa04hau",
  "fields": {
    "session_data": ".eJxVjDEOwjAMRe-SGUUxqZPCyM4ZIjuOSQG1UtNOiLtDpQ6w_vfef5lE61LT2sqcBjFnA-bwuzHlRxk3IHcab5PN07jMA9tNsTtt9jpJeV529--gUqvf2iOquMCiqtAXCEWOqrFHiAjEFD05ZKcnyJA7deAziDjvlbHDwOb9AfwBOEs:1sTGYa:WqSbFbPCGoXpa9kws74npYHo19oPCF8gMWl3MX07DUg",
    "expire_date": "2024-07-29T07:55:36.107Z"
  }
},
{
  "model": "blog.post",
  "pk": 1,
  "fields": {
    "title": "Что такое HTTP?",
    "slug": "http1",
    "author": 1,
    "body": "HTTP (англ. HyperText Transfer Protocol — «протокол передачи гипертекста») — сетевой протокол прикладного уровня, который изначально предназначался для получения с серверов гипертекстовых документов в формате HTML, а с течением времени стал универсальным средством взаимодействия между узлами как Всемирной паутины, так и изолированных веб-инфраструктур. Определение по основным документациям: HTTP — протокол уровня приложений для распределённых, объединённых, гипермедийных информационных систем, используемый в глобальной информационной инициативе Всемирной паутины с 1990 года.",
    "publish": "2024-07-15T07:55:39Z",
    "created": "2024-07-15T07:56:52.814Z",
    "updated": "2024-07-16T11:20:31.238Z",
    "status": "PB"
  }
},
{
  "model": "blog.post",
  "pk": 2,
  "fields": {
    "title": "SOLID",
    "slug": "solid",
    "author": 1,
    "body": "Объектно-ориентированное программирование принесло в разработку ПО новые подходы к проектированию приложений. В частности, ООП позволило программистам комбинировать сущности, объединённые некоей общей целью или функционалом, в отдельных классах, рассчитанных на решение самостоятельных задач и независимых от других частей приложения. Однако само по себе применение ООП не означает, что разработчик застрахован от возможности создания непонятного, запутанного кода, который тяжело поддерживать. Роберт Мартин, для того, чтобы помочь всем желающим разрабатывать качественные ООП-приложения, разработал пять принципов объектно-ориентированного программирования и проектирования, говоря о которых, с подачи Майкла Фэзерса, используют акроним SOLID.\r\n\r\nЧто такое SOLID?\r\nВот как расшифровывается акроним SOLID:\r\n\r\nS: Single Responsibility Principle (Принцип единственной ответственности).\r\nO: Open-Closed Principle (Принцип открытости-закрытости).\r\nL: Liskov Substitution Principle (Принцип подстановки Барбары Лисков).\r\nI: Interface Segregation Principle (Принцип разделения интерфейса).\r\nD: Dependency Inversion Principle (Принцип инверсии зависимостей).\r\nСейчас мы рассмотрим эти принципы на схематичных примерах. Обратите внимание на то, что главная цель примеров заключается в том, чтобы помочь читателю понять принципы SOLID, узнать, как их применять и как следовать им, проектируя приложения. Автор материала не стремился к тому, чтобы выйти на работающий код, который можно было бы использовать в реальных проектах.",
    "publish": "2024-07-15T08:44:44Z",
    "created": "2024-07-15T08:45:15.838Z",
    "updated": "2024-07-16T11:21:02.133Z",
    "status": "PB"
  }
},
{
  "model": "blog.post",
  "pk": 3,
  "fields": {
    "title": "Что такое HTML",
    "slug": "chto-takoe-html",
    "author": 1,
    "body": "HTML (от англ. HyperText Markup Language — «язык гипертекстовой разметки») — стандартизированный язык гипертекстовой разметки документов для просмотра веб-страниц в браузере. Веб-браузеры получают HTML документ от сервера по протоколам HTTP/HTTPS или открывают с локального диска, далее интерпретируют код в интерфейс, который будет отображаться на экране монитора.\r\n\r\nЭлементы HTML являются строительными блоками HTML страниц. С помощью HTML разные конструкции, изображения и другие объекты, такие как интерактивная веб-форма, могут быть встроены в отображаемую страницу. HTML предоставляет средства для создания заголовков, абзацев, списков, ссылок, цитат и других элементов. Элементы HTML выделяются тегами, записанными с использованием угловых скобок. Такие теги, как <img> и <input>, напрямую вводят контент на страницу. Другие теги, такие как <p>, окружают и оформляют текст внутри себя и могут включать другие теги в качестве подэлементов. Браузеры не отображают HTML-теги, но используют их для интерпретации содержимого страницы.\r\n\r\nЯзык XHTML является более строгим вариантом HTML, он следует синтаксису XML и является приложением языка XML в области разметки гипертекста.\r\n\r\nВ HTML можно встроить язык программирования JavaScript с помощью тега.\r\n\r\nТакже включение CSS в HTML позволяет задавать внешний вид и макет страницы.",
    "publish": "2024-07-15T18:10:53Z",
    "created": "2024-07-15T18:11:24.756Z",
    "updated": "2024-07-15T18:11:24.756Z",
    "status": "PB"
  }
},
{
  "model": "blog.post",
  "pk": 4,
  "fields": {
    "title": "TCP и UDP – в чем разница?",
    "slug": "tcp-i-udp-v-chem-raznica",
    "author": 1,
    "body": "Современный мир немыслим без средств связи. Десятки миллионов устройств по всему миру связываются посредством компьютерных сетей. И каждая компьютерная сеть организована по определенным стандартам. Любые устройства взаимодействуют по общепринятой модели OSI, или Базовой Эталонной Модели Взаимодействия Открытых Систем. Данная модель определяет взаимодействие различных сетевых устройств на семи уровнях – Media (к ним относятся физический, канальный и сетевой) и Host – (транспортный, сеансовый, представления и прикладной). В данной статье мы рассмотрим два самых распространенных сетевых протокола транспортного уровня – TCP и UDP, примеры их применения, а также сравним их характеристики.\r\n\r\nВ чем же разница TCP и UDP?\r\n\r\nВообще, протоколы транспортного уровня широко применяются в современных сетях. Именно они позволяют гарантировать доставку сообщения до адресата, а также сохраняют правильную последовательность передачи данных. При этом протоколы имеют ряд различий, что позволяет использовать их профильно, для решения своих задач каждый. TCP и UDP – такое разное установление соединения\r\n\r\nПротокол TCP (Transmission Control Protocol) – это сетевой протокол, который «заточен» под соединение. Иными словами, прежде, чем начать обмен данными, данному протоколу требуется установить соединение между двумя хостами. Данный протокол имеет высокую надежность, поскольку позволяет не терять данные при передаче, запрашивает подтверждения о получении от принимающей стороны и в случае необходимости отправляет данные повторно. При этом отправляемые пакеты данных сохраняют порядок отправки, то есть можно сказать, что передача данных упорядочена. Минусом данного протокола является относительно низкая скорость передачи данных, за счет того что выполнение надежной и упорядоченной передачи занимает больше времени, чем в альтернативном протоколе UDP.\r\n\r\nПротокол UDP (User Datagram Protocol), в свою очередь, более прост. Для передачи данных ему не обязательно устанавливать соединение между отправителем и получателем. Информация передается без предварительной проверки готовности принимающей стороны. Это делает протокол менее надежным – при передаче некоторые фрагменты данных могут теряться. Кроме того, упорядоченность данных не соблюдается – возможен непоследовательный прием данных получателем. Зато скорость передачи данных по данному транспортному протоколу будет более высокой. \r\n\r\nПредупредительный TCP и внезапный UDP\r\n\r\nЗаключение и наглядное сравнение\r\n\r\nПриведем несколько основных пунктов:\r\n\r\nНадежность: в этом случае предпочтительнее будет протокол TCP, за счет подтверждения получения данных, повторной отправки в случае необходимости, а также использованию такого инструмента как тайм-аут. Протокол UDP такого инструментария не имеет, а потому при получении отправленные данные могут приходить не полностью;\r\n\r\nУпорядоченность: опять будет предпочтительнее TCP, поскольку этот протокол гарантирует передачу пакетов данных именно в том порядке, в котором они были отправлены. В случае с UDP такой порядок не соблюдается;\r\n\r\nСкорость: здесь уже лидировать будет UDP, так как более тяжеловесному TCP-протоколу будет требоваться больше времени для установки соединения, подтверждения получения, повторной отправки данных и т.д. ;\r\n\r\nМетод передачи данных: в случае с TCP данные передаются потоково, границы фрагментов данных не имеют обозначения. В случае с UDP данные передаются в виде датаграмм – проверка пакетов на целостность осуществляется принимающей стороной только в случае получения сообщения. Также пакеты данных имеют определенные обозначения границ;\r\n\r\nСравнивая оба протокола, очевидно, что протокол TCP – это, можно сказать, «снайпер». Прицелился, выстрелил, зафиксировал попадание, ищет следующую цель. UDP – это, скорее, «пулеметчик» - выставил ствол в направлении врага и начал долбить очередями, не слишком заботясь о точности. Как в войсках важны обе эти воинские специальности, так и в интернете важны оба этих протокола. TCP применяется там, где требуется точная и подтверждаемая передача данных – например, отправка фотографий, или переписка между пользователями. UDP, в свою очередь, нужен для общения в голосовом формате, или при передаче потокового видео, например, с веб-камер или IP-камер.",
    "publish": "2024-07-16T07:14:34Z",
    "created": "2024-07-16T08:11:26.193Z",
    "updated": "2024-07-16T08:11:26.193Z",
    "status": "PB"
  }
},
{
  "model": "blog.post",
  "pk": 5,
  "fields": {
    "title": "Требования ACID на простом языке",
    "slug": "trebovaniya-acid-na-prostom-yazyke",
    "author": 1,
    "body": "Давайте пройдемся по каждой букве ACID и посмотрим на примерах, чем архив лучше 10 разных файлов. И чем транзакция лучше 10 отдельных запросов.\r\n\r\nAtomicity — Атомарность\r\n\r\nConsistency — Согласованность\r\n\r\nIsolation — Изолированность\r\n\r\nDurability — Надёжность\r\n\r\nAtomicity — Атомарность\r\nАтомарность гарантирует, что каждая транзакция будет выполнена полностью или не будет выполнена совсем. Не допускаются промежуточные состояния.\r\n\r\nДруг познается в беде, а база данных — в работе с ошибками. О, если бы всё всегда было хорошо и без ошибок! Тогда бы никакие ACID были бы не нужны. Но как только возникает ошибка, атомарность становится очень важна.\r\n\r\nДопустим, вы решили отправить маме деньги. Когда вы делаете перевод внутри банка, что происходит:\r\n\r\nУ вас деньги списались\r\n\r\nМаме поступили\r\n\r\n\r\nИ допустим, что у нас 2 отдельных запроса. А теперь посмотрим, что будет при возникновении ошибок:\r\n\r\n1.  У вас на балансе нет нужной суммы — система вывела сообщение об ошибке, но катастрофы не произошло, атомарность тут не нужна.\r\n\r\n\r\n2.      У мамы заблокирована карточка, истек срок годности — деньги ей не поступили. Запрос отменен. Но минуточку... У вас то они уже списались!\r\n\r\n\r\nОшибка на первом этапе никаких проблем в себе не таит. А вот ошибка на втором... Приводит к потере денег, что явно недопустимо.\r\n\r\nЕсли мы отправляем отдельные запросы, система не может связать их между собой. Запрос упал с ошибкой? Система его отменяет. Но только его, ведь она не знает о том, что запрос «у меня деньги спиши» связан с упавшим «сюда положи»!\r\n\r\nТранзакция же позволяет сгруппировать запросы, то есть фактически показывает базе на взаимосвязи между ними. База сама о связях ничего не знает! Это знаете только вы =)\r\n\r\n\r\nИ если падает запрос внутри транзакции, база откатывает всю транзакцию. И приходит в состояние «как было до начала транзакции». Даже если там внутри было 10 запросов, вы можете спать спокойно — сломался один, откатятся все.\r\n\r\n \r\n\r\nConsistency — Согласованность\r\nТранзакция, достигающая своего нормального завершения (EOT — end of transaction, завершение транзакции) и, тем самым, фиксирующая свои результаты, сохраняет согласованность базы данных. Другими словами, каждая успешная транзакция по определению фиксирует только допустимые результаты ​ wikipedia\r\n\r\nЭто свойство вытекает из предыдущего. Благодаря тому, что транзакция не допускает промежуточных результатов, база остается консистентной. Есть такое определение транзакции: «Упорядоченное множество операций, переводящих базу данных из одного согласованного состояния в другое». То есть до выполнения операции и после база остается консистентной (в переводе на русский — согласованной).\r\n\r\n\r\nНапример, пользователь в системе заполняет карточку:\r\n\r\nФИО\r\n\r\nДата рождения\r\n\r\nИНН\r\n\r\nТелефон — отдельно код страны, города и номер\r\n\r\nАдрес — тоже разбит на несколько полей\r\n\r\nВ базе данных у нас есть несколько таблиц:\r\n\r\nclient\r\n\r\nphone\r\n\r\naddress\r\n\r\nТак что когда пользователь заполнил форму и нажал «сохранить», система отправляет в базу данных 3 запроса:\r\n\r\ninsert into client… -- вставить в таблицу клиентов такие-то данные\r\n\r\ninsert into phone…\r\n\r\ninsert into address…\r\n\r\nМожно отправить 3 разных запроса, но лучше сделать одну транзакцию, внутри которой будут эти 3 запроса.\r\n\r\nАтомарность гарантирует, что не получится такого, что адрес с телефоном сохранились, а сам клиент — нет. Это сделало бы базу неконсистентной, ведь у нас бы появились атрибуты, «висящие в воздухе», никому не принадлежащие. Что, в свою очередь, приведет к ошибкам в системе.\r\n\r\nЗа консистентностью должен следить разработчик. Ведь это вопрос скорее бизнес-логики, чем технологий. Те же атрибуты, «висящие в воздухе» — это разработчик знает, что:\r\n\r\nесли есть телефон в таблице phone\r\n\r\nон должен ссылаться на таблицу client\r\n\r\nБаза об этом не знает ничего, если ей не рассказать. И она легко пропустит запрос «добавь в базу телефон без ссылки на клиента», если сам по себе запрос корректный, а разработчик не повесил на таблицу foreign key.\r\n\r\n\r\nМожно повесить на таблицу constraint. Например, «баланс строго положительный». Тогда сценарий с ошибкой будет выглядеть так:\r\n\r\n1.  Пользователь пытается перевести другу 100р, хотя у него самого 10\r\n\r\n\r\n2.  Система отправляет в базу запрос — «обнови баланс карты, теперь там X – 100».\r\n\r\n\r\n3.  База пытается выполнить запрос, но ой! Нарушен constraint, в итоге операции баланс стал отрицательным, эту ошибку она и возвращает.\r\n\r\n\r\n4.  Система обрабатывает ошибку и выводит ее пользователю в читаемом виде.\r\n\r\nК сожалению, нет единого механизма рассказать базе о том, какое состояние считается согласованным. Разработчик может использовать foreign ключи, какие-то констрейнты — это БД проверит. Но что с одного счета списалось, а на другой пришло — это БД уже не проверит. Это бизнес-логика.\r\n\r\nРазработчик пишет код, пошагово переводящий БД в нужное согласованное состояние и, если где-то посередине возникает ошибка или нежданчик, откатывает всю транзакцию. То есть можно после каждого шага делать запрос, проверяя какое-то поле:\r\n\r\n— Эй, баланс, ты ведь положительный остался?\r\n\r\n— Ку-ку, тебе деньги пришли?\r\n\r\nЕсли вдруг проверка не прошла, то кидаем ошибку и делаем откат.\r\n\r\nIsolation — Изолированность\r\nВо время выполнения транзакции параллельные транзакции не должны оказывать влияния на её результат.\r\n\r\nЕсли у нас система строго для одного человека, проблем не будет. А если пользователей несколько? Тогда транзакции запускают в параллель — для ускорения работы системы. А иначе представьте себе, что вы делаете заказ в интернет-магазине и система вам говорит: «Вы в очереди, перед вами еще 100 человек хотят заказ оформить, подождите». Бред же? Бред!\r\n\r\nВот и приходится распараллеливать запросы. Но к каким эффектам может привести параллельная работа двух транзакций?\r\n\r\n1 эффект: \"Потерянная запись\"\r\n\r\n\r\nЕсть некий счет А, на котором лежит 500 у.е.\r\n\r\nКассир 1 (К1 на рисунке) списал с него 300 у.е. Обозначим его действия рыжими стрелками. Списал 300, на выходе получает 200 = 500 - 300.\r\n\r\nКассир 2 (К2) тоже решил обратиться к этому же счету, и записал туда 300 у.е., пока К1 еще не успел закрыть свою транзакцию. Так как первая транзакция не закрыта, сумма на счете до сих пор 500, получаем 500 + 300 = 800.\r\n\r\nИтог — мы \"потеряли запись\" первого кассира, ведь на выходе у нас А = 800, хотя должно быть 500. \"Кто последний вписал результат - того и тапки\". Получается так.\r\n\r\n2 эффект: \"Грязное чтение\"\r\n\r\n\r\nЕсть некий счет А, на котором лежит 500 у.е.\r\n\r\nКассир 1 списал с него 300 у.е. Обозначим его действия рыжими стрелками. Списал 300. Потом передумал и сделал откат - на выходе остались те же 500 у.е.\r\n\r\nКассиру 2 (К2) понадобилась информация по этому счету и он ее считал до того, как К1 закрыл свою транзакцию.\r\n\r\nИтог — второй кассир считал неверную сумму, построил неверный отчет/отказал в визе платежеспособному гражданину и т.д.\r\n\r\n3 эффект: \"Повторимое чтение\"\r\n\r\n\r\nЕсть некие данные.\r\n\r\nКассир 1 строит отчет. Операции идут последовательно для каждой колонки. Система считала данные, записала в первую колонку (например, взяв минимум от них).\r\n\r\nОбозначим получение данных зеленым цветом, а изменение - рыжим.\r\n\r\nКассир 2 влез в эту таблицу данных и изменил некоторые счета в ней.\r\n\r\nУ кассира 1 продолжается построение отчета. И во вторую колонку система считывает уже новые данные.\r\n\r\nИтог - отчет построен на основании разных данных.\r\n\r\n4 эффект: \"Фантомы\"\r\n\r\n\r\nЕсть некие данные.\r\n\r\nКассир 1 строит отчет. Операции идут последовательно для каждой колонки. Система считала данные, записала в первую колонку (например, взяв минимум от них).\r\n\r\nОбозначим получение данных зеленым цветом, а изменение - рыжим.\r\n\r\nКассир 2 влез в эту таблицу данных и добавил новые счета/удалил некоторые старые.\r\n\r\nУ кассира 1 продолжается построение отчета. И во вторую колонку система считывает уже новые данные.\r\n\r\nИтог — отчет построен на основании разных данных.\r\n\r\nРазница между 3-им и 4-ым эффектами в том, что в одном случае данные изменяются, а во втором — добавляются/удаляются. То есть меняется ещё и их количество.\r\n\r\nКак бороться\r\nКак бороться с этими проблемами? Нужно изолировать транзакцию. Способов есть несколько, но основные — блокировки и версии.\r\n\r\nБлокировки — это когда мы блокируем данные в базе. Можно заблокировать одну строку в таблице, а можно всю таблицу. Можно заблокировать данные на редактирование, а можно и на чтение тоже.\r\n\r\nПодробнее о блокировках можно почитать тут:\r\n\r\nБлокировка (СУБД) — статья из вики\r\n\r\nРежимы блокировки — здесь хорошо описано, в чем отличие эксклюзивной от разделямой блокировки\r\n\r\nTransaction Isolation Levels in DBMS — статья на английском, но хорошо прошлись по разным уровням изоляции базы\r\n\r\nВерсии — это когда внутри базы при каждом обновлении создается новая версия данных и сохраняется старая. Версионирование скрыто от разработчика, то есть мы не видим в базе никаких номеров версий и данных по ним. Просто пока транзакция, обновляющая запись, не покомитит свое изменение, остальные потребители читают старую версию записи и не блокируются.\r\n\r\n\r\n \r\n\r\n \r\n\r\nDurability — Надёжность\r\nЕсли пользователь получил подтверждение от системы, что транзакция выполнена, он может быть уверен, что сделанные им изменения не будут отменены из-за какого-либо сбоя. Обесточилась система, произошел сбой в оборудовании? На выполненную транзакцию это не повлияет.\r\n\r\nСм также:\r\n\r\nACID в википедии\r\n\r\nТранзакции, ACID, CAP — статья с geekbrains\r\n\r\nРазбираем ACID по буквам в NoSQL — а это с Хабра\r\n\r\nНу и напомню ссылку на статьи «Что такое транзакция» и «Что такое База Данных (БД)».\r\n\r\nP.S. — больше полезных статей ищите в моем блоге по метке «полезное». А полезные видео — на моем youtube-канале",
    "publish": "2024-07-16T08:11:42Z",
    "created": "2024-07-16T08:12:14.385Z",
    "updated": "2024-07-16T08:12:14.385Z",
    "status": "DF"
  }
},
{
  "model": "blog.post",
  "pk": 6,
  "fields": {
    "title": "Markdown-test",
    "slug": "markdown-test",
    "author": 1,
    "body": "This is a post formatted with markdown\r\n\r\n--------------------------------------\r\n\r\n*This is emphasized* and **this is more emphasized**.\r\n\r\nHere is a list:\r\n\r\n* One\r\n\r\n* Two\r\n\r\n* Three\r\n\r\n \r\n\r\nAnd a [link to the Django website](https://www.djangoproject.com/)",
    "publish": "2024-07-16T15:21:46Z",
    "created": "2024-07-16T15:22:20.017Z",
    "updated": "2024-07-16T15:22:20.017Z",
    "status": "PB"
  }
},
{
  "model": "blog.comment",
  "pk": 1,
  "fields": {
    "post": 4,
    "name": "Владимир",
    "email": "vladimir_putin@gmail.com",
    "body": "На собесе спросили, пригодилось, спасибо",
    "created": "2024-07-16T11:07:17.350Z",
    "updated": "2024-07-16T11:07:17.350Z",
    "active": true
  }
},
{
  "model": "blog.comment",
  "pk": 2,
  "fields": {
    "post": 4,
    "name": "Владислав Бойко",
    "email": "enboikovlad@gmail.com",
    "body": "Чувак из ITechArt мне все уши прожжал отличиями",
    "created": "2024-07-16T15:10:17.762Z",
    "updated": "2024-07-16T15:10:17.762Z",
    "active": true
  }
},
{
  "model": "blog.comment",
  "pk": 3,
  "fields": {
    "post": 4,
    "name": "Альберт",
    "email": "alber@gmail.com",
    "body": "В жизни не пригодилось, я учился в ИТ вузе, а работаю сварщиком",
    "created": "2024-07-16T15:11:23.572Z",
    "updated": "2024-07-16T15:11:23.572Z",
    "active": true
  }
},
{
  "model": "taggit.tag",
  "pk": 1,
  "fields": {
    "name": "programming",
    "slug": "programming"
  }
},
{
  "model": "taggit.tag",
  "pk": 2,
  "fields": {
    "name": "web",
    "slug": "web"
  }
},
{
  "model": "taggit.tag",
  "pk": 3,
  "fields": {
    "name": "solid",
    "slug": "solid"
  }
},
{
  "model": "taggit.tag",
  "pk": 4,
  "fields": {
    "name": "markdown",
    "slug": "markdown"
  }
},
{
  "model": "taggit.taggeditem",
  "pk": 1,
  "fields": {
    "tag": 1,
    "content_type": 7,
    "object_id": 1
  }
},
{
  "model": "taggit.taggeditem",
  "pk": 2,
  "fields": {
    "tag": 2,
    "content_type": 7,
    "object_id": 1
  }
},
{
  "model": "taggit.taggeditem",
  "pk": 4,
  "fields": {
    "tag": 3,
    "content_type": 7,
    "object_id": 3
  }
},
{
  "model": "taggit.taggeditem",
  "pk": 5,
  "fields": {
    "tag": 3,
    "content_type": 7,
    "object_id": 2
  }
},
{
  "model": "taggit.taggeditem",
  "pk": 6,
  "fields": {
    "tag": 4,
    "content_type": 7,
    "object_id": 6
  }
},
{
  "model": "sites.site",
  "pk": 1,
  "fields": {
    "domain": "example.com",
    "name": "example.com"
  }
}
]
